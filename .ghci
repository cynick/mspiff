:set +s
:set +t
:set -W
:set -XOverloadedStrings
:set editor ec
:set prompt "Î»: "
:def! . readFile
:def! g (\_ -> return ":set -w\n:. .ghci\n")

:set -Wall

import qualified Data.List as DL
import Data.List.Split
import qualified Data.ByteString.Lazy as BS
import qualified Data.Map.Strict as M
import qualified Data.List.Split as DL
import qualified Data.List.NonEmpty as NE
import Data.Word
import Text.Printf
import Control.Arrow
import Data.Either
import Data.Text.Read
import Data.Text
import Data.Time
import Data.Function
import Data.List.NonEmpty
import Data.Time.Clock.POSIX
import Data.Maybe

import qualified Data.Text.IO as T
import Test.QuickCheck
import Text.HTML.TagSoup
import Lucid
import Mspiff.Model
import Mspiff.Loader
import Mspiff.Scheduler
import Mspiff.Html

:def! rg (\_ -> return ":r\n:g\n")
:def! Rg (\_ -> return ":r\n:g\n")

:def! ra (\_ -> return ":set -w\n:l test/Runner.hs\nrun")
:def! Ra (\_ -> return ":ra")
:def! T (\_ -> return ":t")

:def! rd (\t -> (return (":def! r (\\_ -> return (\":rt " ++ t ++ "\"))")))

:def! rt (\t -> return (":m Test.HUnit\n:l test/Test/" ++ t ++ ".hs\nrunTestTT tests"))

let rc s = let pre t = ":m Test.HUnit\n:l test/Test/" ++ t ++ ".hs\nrunTestTT " in case DL.words s of [t,i] -> pre t ++ "(tests1 " ++ i ++ ")"; [t] -> pre t ++ "tests"; _ -> error $ "wrong args for tc:" ++ show s

:def! rc (return . rc)

:def! rl (\t -> return (":m Test.HUnit\n:l test/Test/" ++ t ++ ".hs\nrunTestTT lastTest"))

:def! b (\_ -> return (":l src/main.hs\n:set args build\nmain"))
:def! rb (\_ -> return (":l src/main.hs\n:set args rebuild\nmain"))

let gp = ":rg\nhtml (page w)\n"
:def! gp (\_ -> return gp)

let p = mapM_ print

ts@(UTCTime d dt) <- getCurrentTime
let html = renderToFile "t.html"

Just cat@(Catalog{..}) <- loadCatalog <$> BS.readFile "data/catalog"

let qc = quickCheckWith stdArgs { maxSuccess = 5000 }
let vc = verboseCheckWith stdArgs { maxSuccess = 5000 }
let hist v = DL.foldl' (\(a,b) v' -> if v' == v then (a+1,b) else (a,b+1)) (0,0)

let toUtc = posixSecondsToUTCTime . fromIntegral . showtime



